/* eslint-disable @typescript-eslint/ban-ts-comment */
//! Do not edit this file manually, it is generate by `prisma repo generator`

import {
  PrismaClient,
  Prisma,
  Categoria,
  Insumo,
  Fornecedor,
  Cliente,
  Orcamento,
  Pedido,
  Produto,
  Cotacao,
  ListaInsumo,
  Usuario,
} from '@prisma/client';
import _ from 'lodash';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type AnyRecord = Record<string, any>;

export type BaseOption<Include, Select> = {
  include?: Include;
  select?: Select;
};

export type Find<Select, Include, Cursor, Order, Distinct> = BaseOption<
  Include,
  Select
> & {
  cursor?: Cursor;
  take?: number;
  skip?: number;
  orderBy?: Prisma.Enumerable<Order>;
  distinct?: Distinct;
};

export type CountArgs<Select, Cursor, Order, Distinct> = Omit<
  Find<Select, never, Cursor, Order, Distinct>,
  'include'
>;

export type Aggregate<Cursor, Order, Distinct> = Omit<
  CountArgs<never, Cursor, Order, Distinct>,
  'select' | 'distinct'
>;

export const prisma = new PrismaClient({
  log: ['error', 'info', 'query', 'warn'],
});

export const models = _.omit(prisma, [
  '$on',
  '$connect',
  '$disconnect',
  '$use',
  '$executeRaw',
  '$executeRawUnsafe',
  '$queryRaw',
  '$queryRawUnsafe',
  '$transaction',
]);

export const MODELS_NAME = {
  CATEGORIA: 'categoria',
  INSUMO: 'insumo',
  FORNECEDOR: 'fornecedor',
  CLIENTE: 'cliente',
  ORCAMENTO: 'orcamento',
  PEDIDO: 'pedido',
  PRODUTO: 'produto',
  COTACAO: 'cotacao',
  LISTA_INSUMO: 'listaInsumo',
  USUARIO: 'usuario',
} as const;

// eslint-disable-next-line @typescript-eslint/ban-types
export type ModelStructure = {
  categoria: Categoria;
  insumo: Insumo;
  fornecedor: Fornecedor;
  cliente: Cliente;
  orcamento: Orcamento;
  pedido: Pedido;
  produto: Produto;
  cotacao: Cotacao;
  listaInsumo: ListaInsumo;
  usuario: Usuario;
};

export type ModelName = keyof ModelStructure;

export type ModelScalarFields<T extends keyof ModelStructure> =
  Prisma.Enumerable<keyof ModelStructure[T]>;

export type ModelDelegate =
  | Prisma.RejectOnNotFound
  | Prisma.RejectPerOperation
  | undefined;

export type ModelTypes<T = unknown> = {
  categoria: {
    Where: Prisma.CategoriaWhereInput;
    Select: Prisma.CategoriaSelect;
    Include: unknown;
    Create: Prisma.CategoriaCreateInput | Prisma.CategoriaUncheckedCreateInput;
    Update: Prisma.CategoriaUpdateInput | Prisma.CategoriaUncheckedUpdateInput;
    Cursor: Prisma.CategoriaWhereUniqueInput;
    Order: Prisma.CategoriaOrderByWithRelationInput;
    Delegate: Prisma.CategoriaDelegate<ModelDelegate>;
    GroupBy: Prisma.CategoriaGroupByOutputType;
    // @ts-ignore
    Return: Prisma.CategoriaGetPayload<T>;
  };
  insumo: {
    Where: Prisma.InsumoWhereInput;
    Select: Prisma.InsumoSelect;
    Include: Prisma.InsumoInclude;
    Create: Prisma.InsumoCreateInput | Prisma.InsumoUncheckedCreateInput;
    Update: Prisma.InsumoUpdateInput | Prisma.InsumoUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.InsumoOrderByWithRelationInput;
    Delegate: Prisma.InsumoDelegate<ModelDelegate>;
    GroupBy: Prisma.InsumoGroupByOutputType;
    // @ts-ignore
    Return: Prisma.InsumoGetPayload<T>;
  };
  fornecedor: {
    Where: Prisma.FornecedorWhereInput;
    Select: Prisma.FornecedorSelect;
    Include: unknown;
    Create:
      | Prisma.FornecedorCreateInput
      | Prisma.FornecedorUncheckedCreateInput;
    Update:
      | Prisma.FornecedorUpdateInput
      | Prisma.FornecedorUncheckedUpdateInput;
    Cursor: Prisma.FornecedorWhereUniqueInput;
    Order: Prisma.FornecedorOrderByWithRelationInput;
    Delegate: Prisma.FornecedorDelegate<ModelDelegate>;
    GroupBy: Prisma.FornecedorGroupByOutputType;
    // @ts-ignore
    Return: Prisma.FornecedorGetPayload<T>;
  };
  cliente: {
    Where: Prisma.ClienteWhereInput;
    Select: Prisma.ClienteSelect;
    Include: unknown;
    Create: Prisma.ClienteCreateInput | Prisma.ClienteUncheckedCreateInput;
    Update: Prisma.ClienteUpdateInput | Prisma.ClienteUncheckedUpdateInput;
    Cursor: Prisma.ClienteWhereUniqueInput;
    Order: Prisma.ClienteOrderByWithRelationInput;
    Delegate: Prisma.ClienteDelegate<ModelDelegate>;
    GroupBy: Prisma.ClienteGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ClienteGetPayload<T>;
  };
  orcamento: {
    Where: Prisma.OrcamentoWhereInput;
    Select: Prisma.OrcamentoSelect;
    Include: Prisma.OrcamentoInclude;
    Create: Prisma.OrcamentoCreateInput | Prisma.OrcamentoUncheckedCreateInput;
    Update: Prisma.OrcamentoUpdateInput | Prisma.OrcamentoUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.OrcamentoOrderByWithRelationInput;
    Delegate: Prisma.OrcamentoDelegate<ModelDelegate>;
    GroupBy: Prisma.OrcamentoGroupByOutputType;
    // @ts-ignore
    Return: Prisma.OrcamentoGetPayload<T>;
  };
  pedido: {
    Where: Prisma.PedidoWhereInput;
    Select: Prisma.PedidoSelect;
    Include: Prisma.PedidoInclude;
    Create: Prisma.PedidoCreateInput | Prisma.PedidoUncheckedCreateInput;
    Update: Prisma.PedidoUpdateInput | Prisma.PedidoUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.PedidoOrderByWithRelationInput;
    Delegate: Prisma.PedidoDelegate<ModelDelegate>;
    GroupBy: Prisma.PedidoGroupByOutputType;
    // @ts-ignore
    Return: Prisma.PedidoGetPayload<T>;
  };
  produto: {
    Where: Prisma.ProdutoWhereInput;
    Select: Prisma.ProdutoSelect;
    Include: unknown;
    Create: Prisma.ProdutoCreateInput | Prisma.ProdutoUncheckedCreateInput;
    Update: Prisma.ProdutoUpdateInput | Prisma.ProdutoUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.ProdutoOrderByWithRelationInput;
    Delegate: Prisma.ProdutoDelegate<ModelDelegate>;
    GroupBy: Prisma.ProdutoGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ProdutoGetPayload<T>;
  };
  cotacao: {
    Where: Prisma.CotacaoWhereInput;
    Select: Prisma.CotacaoSelect;
    Include: unknown;
    Create: Prisma.CotacaoCreateInput | Prisma.CotacaoUncheckedCreateInput;
    Update: Prisma.CotacaoUpdateInput | Prisma.CotacaoUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.CotacaoOrderByWithRelationInput;
    Delegate: Prisma.CotacaoDelegate<ModelDelegate>;
    GroupBy: Prisma.CotacaoGroupByOutputType;
    // @ts-ignore
    Return: Prisma.CotacaoGetPayload<T>;
  };
  listaInsumo: {
    Where: Prisma.ListaInsumoWhereInput;
    Select: Prisma.ListaInsumoSelect;
    Include: Prisma.ListaInsumoInclude;
    Create:
      | Prisma.ListaInsumoCreateInput
      | Prisma.ListaInsumoUncheckedCreateInput;
    Update:
      | Prisma.ListaInsumoUpdateInput
      | Prisma.ListaInsumoUncheckedUpdateInput;
    Cursor: unknown;
    Order: Prisma.ListaInsumoOrderByWithRelationInput;
    Delegate: Prisma.ListaInsumoDelegate<ModelDelegate>;
    GroupBy: Prisma.ListaInsumoGroupByOutputType;
    // @ts-ignore
    Return: Prisma.ListaInsumoGetPayload<T>;
  };
  usuario: {
    Where: Prisma.UsuarioWhereInput;
    Select: Prisma.UsuarioSelect;
    Include: Prisma.UsuarioInclude;
    Create: Prisma.UsuarioCreateInput | Prisma.UsuarioUncheckedCreateInput;
    Update: Prisma.UsuarioUpdateInput | Prisma.UsuarioUncheckedUpdateInput;
    Cursor: Prisma.UsuarioWhereUniqueInput;
    Order: Prisma.UsuarioOrderByWithRelationInput;
    Delegate: Prisma.UsuarioDelegate<ModelDelegate>;
    GroupBy: Prisma.UsuarioGroupByOutputType;
    // @ts-ignore
    Return: Prisma.UsuarioGetPayload<T>;
  };
};
